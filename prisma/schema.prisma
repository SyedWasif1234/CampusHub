// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NEONDB_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum ApiKey_Role {
  USER
  ADMIN
  BLOCKED
  READ_ONLY
}

enum status{
  ACTIVE
  DROPPED
  COMPLETED
}

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  enrollement_number  String   @unique
  role                UserRole @default(STUDENT)
  verificationToken   String?
  passwordResetToken  String?
  PasswordResetExpiry String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  apiKeys       ApiKey[]
  result        Results[]
  course        Courses[]
  enrollments   Enrollment[]
  materials     Materials[]
  announcements Announcements[]
}

model ApiKey {
  id        String      @id @default(cuid())
  key       String      @unique
  userId    String
  createdAt DateTime    @default(now())
  expiresAt DateTime?
  isActive  Boolean     @default(true)
  role      ApiKey_Role @default(USER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Courses {
  id            String    @id @default(cuid())
  name          String    @unique // Course title (e.g., "DBMS")
  code          String    @unique // Course code (e.g., "CS301")
  description   String? // Optional short description
  creditHours   Int // e.g., 3 or 4
  semester      Int // e.g., 5th semester
  department    String // e.g., "CSE", "ECE"
  userId        String // ID of the faculty teaching
  enrolledUsers Int       @default(0) // Total enrolled
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  expiresAt     DateTime? // Optional: for archived courses

  enrollments Enrollment[]

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  materials     Materials[] // Materials for the course
  results       Results[] // Results associated with the course
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  status     String   @default("ACTIVE") // ACTIVE, DROPPED, COMPLETED, etc.
  grade      String? // Optional: A+, B, etc.

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // A user can't enroll in the same course twice
}

model Results {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  marks     Float? // Optional: Marks obtained
  grade     String? // Optional: Grade (A+, B, etc.)
  status    String? // e.g., "PASSED", "FAILED"
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // Prevent duplicate results for same course
}

model Announcements {
  id        String   @id @default(cuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  userId   String // User ID (faculty/admin)

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Materials {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String // URL or file path for PDF/Video/etc.
  type        String // e.g., "PDF", "VIDEO", "SLIDES"
  uploadedAt  DateTime @default(now())

  courseId String
  userId   String // User ID (usually faculty)

  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
